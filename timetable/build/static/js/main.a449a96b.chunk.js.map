{"version":3,"sources":["utils/useTime.js","components/Leg.js","components/Plan.js","components/BikePlan.js","components/InfoScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["dateAt","UTCmil","date","Date","setTime","console","trace","ss","String","getSeconds","padStart","mins","getMinutes","hh","getHours","dd","getDate","mm","getMonth","getFullYear","time","Leg","props","from","leg","name","fromClean","startTime","slice","to","toClean","endTime","mode","icon","faWalking","Icon","color","Segment","Group","className","horizontal","raised","textAlign","home","university","GET_PLAN","gql","Plan","queryVariables","useQuery","variables","loading","error","data","Container","id","plan","itineraries","map","itinerary","Grid","key","verticalAlign","columns","style","background","Column","width","stretched","legs","valueOf","padding","Header","as","data-testid","secs","duration","Math","ceil","BikePlan","leave","arrive","addMinsToDate","size","InfoScreen","screenDate","getTime","margin","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a449a96b.chunk.js","sourcesContent":["\n// Utility funcions to handle time-props.\n\nexport function secsToMins (secs) {\n  return Math.ceil(secs / 60)\n}\nexport function UTCmilNow () {\n  var now = new Date()\n  return now.getTime()\n}\n\nexport function addMinsToDate (date, mins) {\n  return date + mins * 60000\n}\n\n// Current time as Object with attributes date <YYYY-MM-DD> and time <HH:MM:SS>.\nexport function dateNow () {\n  var now = new Date()\n  var ss = String(now.getSeconds()).padStart(2, '0')\n  var mins = String(now.getMinutes()).padStart(2, '0')\n  var hh = String(now.getHours()).padStart(2, '0')\n  var dd = String(now.getDate()).padStart(2, '0')\n  var mm = String(now.getMonth() + 1).padStart(2, '0')\n  var yyyy = now.getFullYear()\n  const dateNow = yyyy + '-' + mm + '-' + dd\n  const timeNow = hh + ':' + mins + ':' + ss\n\n  return {\n    date: dateNow,\n    time: timeNow\n  }\n}\n\n// Moment defined with UTCmil as Object with attributes date <YYYY-MM-DD> and time <HH:MM:SS>.\nexport function dateAt (UTCmil) {\n  var date = new Date()\n  date.setTime(UTCmil)\n  console.trace(date)\n  var ss = String(date.getSeconds()).padStart(2, '0')\n  var mins = String(date.getMinutes()).padStart(2, '0')\n  var hh = String(date.getHours()).padStart(2, '0')\n  var dd = String(date.getDate()).padStart(2, '0')\n  var mm = String(date.getMonth() + 1).padStart(2, '0')\n  var yyyy = date.getFullYear()\n  const dateNow = yyyy + '-' + mm + '-' + dd\n  const timeNow = hh + ':' + mins + ':' + ss\n\n  return {\n    date: dateNow,\n    time: timeNow\n  }\n}\n\n// Today's UTC milliseconds from timestamp defined with param time.\nexport function UTCmilAt (time) {\n  const hh = Number(time.split(':')[0])\n  const mins = Number(time.split(':')[1])\n  var date = new Date()\n  date.setMinutes(mins)\n  date.setHours(hh)\n  date.setSeconds(0)\n  return date.getTime()\n}\n","import { from } from 'apollo-boost'\nimport React from 'react'\nimport { Segment, Icon } from 'semantic-ui-react'\nimport { dateAt } from '../utils/useTime'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faWalking } from '@fortawesome/free-solid-svg-icons'\n\nfunction Leg (props) {\n  var from = props.leg.from.name\n  var fromClean = (from === 'Origin') ? 'Home' : from\n  var startTime = dateAt(props.leg.startTime).time.slice(0, -3)\n  var to = props.leg.to.name\n  var toClean = (to === 'Destination') ? 'University' : to\n  var endTime = dateAt(props.leg.endTime).time.slice(0, -3)\n  var mode = props.leg.mode\n  var icon = (mode === 'WALK') ? <FontAwesomeIcon icon={faWalking} />\n    : (mode === 'BUS') ? <Icon name=\"bus\" color=\"blue\" />\n      : (mode === 'SUBWAY') ? <Icon name=\"subway\" color=\"orange\" />\n        : mode\n  return (\n    <Segment.Group className=\"leg\" horizontal raised>\n      <Segment className=\"from\" textAlign=\"center\"> {fromClean}<br />{startTime} </Segment>\n      <Segment className=\"mode\" textAlign=\"center\"> {icon} </Segment>\n      <Segment className=\"to\" textAlign=\"center\"> {toClean} <br />{endTime}</Segment>\n    </Segment.Group>\n  )\n}\n\nexport default Leg\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport { Grid, Container, Segment, Header } from 'semantic-ui-react'\nimport Leg from './Leg'\nimport { dateAt, secsToMins } from '../utils/useTime'\n\n// Lat and Long coordinates of \"home\" and Eficode used in the query below.\nconst home = {\n  lat: 60.161042,\n  long: 24.878615\n}\nconst university = {\n  lat: 60.186237,\n  long: 24.828348\n}\n\n// The query used to fetch data for three itineraries at a time. Coordinates can be modified from above and the date- and time-parameters are\n// passed to the query from inside the <Plan>-component that renders the data.\nconst GET_PLAN = gql`\n  query Plan($date: String, $time: String, ){\n    plan(\n      date: $date,\n      time: $time\n      from: {lat: ${home.lat}, lon: ${home.long}}\n      to: {lat: ${university.lat}, lon: ${university.long}}\n      numItineraries: 3\n    ) {\n      itineraries {\n        startTime\n        duration\n        legs {\n          from {\n            name\n          }\n          startTime\n          to {\n            name\n          }\n          endTime\n          mode\n          route {\n            shortName\n          }\n          \n        }\n      }\n    }\n  }\n`\n\n// A Plan represents a group of three itineraries. It gets passed the date and time by the paenting InfoScreen.\nfunction Plan (props) {\n  var queryVariables = dateAt(props.date)\n  const { loading, error, data } = useQuery(GET_PLAN, {\n    variables: {\n      date: queryVariables.date,\n      time: queryVariables.time\n    }\n  })\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :(</p>\n  return (\n    <Container className=\"planContainer\" id=\"plan\">\n      {data.plan.itineraries.map((itinerary) => (\n        <Segment>\n          <Grid className=\"itinerary\" key={itinerary.startTime} verticalAlign=\"middle\" columns={2} style={{background:\"#cceaff\"}}>\n            <Grid.Column width={14} stretched='true'>\n              <Grid className=\"itinerary-legs\" >\n                {itinerary.legs.map((leg) => (\n                  <Grid.Column width={5} stretched='true' verticalAlign=\"middle\">\n                    <Leg key={leg.startTime.valueOf()} leg={leg} style={{ padding: '1em' }} />\n                  </Grid.Column>\n                ))}\n              </Grid>\n            </Grid.Column>\n            <Grid.Column width={2}>\n              <Segment className=\"itinerary-duration\" stretched>\n                <Header as='h4' data-testid=\"duration\">{secsToMins(itinerary.duration)}min</Header>\n              </Segment>\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      ))}\n    </Container>\n  )\n}\n\nexport default Plan\n","import React from 'react'\nimport { Container, Header, Segment, Icon } from 'semantic-ui-react'\nimport { dateAt, addMinsToDate } from '../utils/useTime'\n\n// The BikePlan represents a segment that displays a plan to get to work with a bike.\nfunction BikePlan (date) {\n  var leave = dateAt(date.date).time.slice(0,-3)\n  var arrive = dateAt(addMinsToDate(date.date, 12.5)).time.slice(0, -3)\n  return (\n    <Container>\n      <Header as='h3'>\n        Feeling frisky? Take a bike.\n      </Header>\n      <Segment.Group horizontal>\n        <Segment textAlign=\"center\">\n          Home<br />{leave}\n        </Segment>\n        <Segment textAlign=\"center\">\n          <Icon name='bicycle' size='large' />\n        </Segment>\n        <Segment textAlign=\"center\">\n          University<br />{arrive}\n        </Segment>\n      </Segment.Group>\n    </Container>\n  )\n}\n\nexport default BikePlan\n","import React from 'react'\nimport { Header, Segment, Container } from 'semantic-ui-react'\nimport Plan from './Plan'\nimport BikePlan from './BikePlan'\nimport { UTCmilNow } from '../utils/useTime'\n\n// The infoscreen represents everything that is displayed. Holds the time-state.\nfunction InfoScreen () {\n  const screenDate = UTCmilNow()\n\n  return (\n    <Container className=\"InfoScreen\" style={{ margin: '2em' }} >\n      <Header as='h1'>Get-to-Class!</Header>\n      <Segment className=\"plan\" style={{ background: '#a6abff' }}>\n        <Plan date={screenDate} />\n      </Segment>\n      <Segment className=\"bike-plan\" style={{ background: '#cceaff' }}>\n        <BikePlan date={screenDate} />\n      </Segment>\n    </Container>\n  )\n}\n\nexport default InfoScreen\n","import React from 'react'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport InfoScreen from './InfoScreen'\n\n// Apollo Client, uses the Helsinki Region GraphQL-endpoint of digitransit.\nconst client = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'\n})\n\n// The whole app. Wraps an ApolloProvider around the InfoScreen.\nconst App = () => {\n  return (<div className=\"App\">\n    <ApolloProvider client={client}>\n      <InfoScreen/>\n    </ApolloProvider>\n  </div>)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}