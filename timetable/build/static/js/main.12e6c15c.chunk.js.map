{"version":3,"sources":["utils/useTime.js","components/Plan.js","components/InfoScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["dateNow","now","Date","ss","String","getSeconds","padStart","mins","getMinutes","hh","getHours","dd","getDate","mm","getMonth","date","getFullYear","time","dateAt","UTCmil","setTime","home","eficode","GET_PLAN","gql","Plan","useQuery","variables","loading","error","data","className","id","plan","itineraries","map","itinerary","duration","legs","leg","from","name","startTime","to","endTime","mode","InfoScreen","useState","setPlan","useEffect","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8NACO,SAASA,IACd,IAAIC,EAAM,IAAIC,KACVC,EAAKC,OAAOH,EAAII,cAAcC,SAAS,EAAG,KAC1CC,EAAOH,OAAOH,EAAIO,cAAcF,SAAS,EAAG,KAC5CG,EAAKL,OAAOH,EAAIS,YAAYJ,SAAS,EAAG,KACxCK,EAAKP,OAAOH,EAAIW,WAAWN,SAAS,EAAG,KACvCO,EAAKT,OAAOH,EAAIa,WAAa,GAAGR,SAAS,EAAG,KAKhD,MAAO,CACLS,KALSd,EAAIe,cACQ,IAAMH,EAAK,IAAMF,EAKtCM,KAJcR,EAAK,IAAMF,EAAO,IAAMJ,GAQnC,SAASe,EAAQC,GACtB,IAAIJ,EAAO,IAAIb,KACfa,EAAKK,QAAQD,GACb,IAAIhB,EAAKC,OAAOW,EAAKV,cAAcC,SAAS,EAAG,KAC3CC,EAAOH,OAAOW,EAAKP,cAAcF,SAAS,EAAG,KAC7CG,EAAKL,OAAOW,EAAKL,YAAYJ,SAAS,EAAG,KACzCK,EAAKP,OAAOW,EAAKH,WAAWN,SAAS,EAAG,KACxCO,EAAKT,OAAOW,EAAKD,WAAa,GAAGR,SAAS,EAAG,KAKjD,MAAO,CACLS,KALSA,EAAKC,cACO,IAAMH,EAAK,IAAMF,EAKtCM,KAJcR,EAAK,IAAMF,EAAO,IAAMJ,G,ilBCtB1C,IAAMkB,EACC,UADDA,EAEE,UAEFC,EACC,UADDA,EAEE,UAKFC,EAAWC,YAAH,IAKMH,EAAkBA,EACpBC,EAAqBA,GAyDxBG,MA9Bf,YAAgC,IAAfV,EAAc,EAAdA,KAAME,EAAQ,EAARA,KAAQ,EAEIS,YAASH,EAAU,CAClDI,UAAW,CAAEZ,OAAME,UADbW,EAFqB,EAErBA,QAASC,EAFY,EAEZA,MAAOC,EAFK,EAELA,KAIxB,OAAIF,EAAgB,yCAChBC,EAAc,uCAEhB,yBAAKE,UAAU,OAAOC,GAAG,QACtBF,EAAKG,KAAKC,YAAYC,KAAI,SAAAC,GAAS,OAClC,yBAAKL,UAAU,aACb,uBAAGA,UAAU,oBAAb,wBACwBK,EAAUC,UAElC,yBAAKN,UAAU,kBAAf,SACSK,EAAUE,KAAKH,KAAI,SAAAI,GAAG,OAC3B,yBAAKR,UAAU,OAAf,SACSQ,EAAIC,KAAKC,KADlB,OAC4BvB,EAAOqB,EAAIG,WAAWzB,KAAK,6BADvD,OAEOsB,EAAII,GAAGF,KAFd,OAEwBvB,EAAOqB,EAAIK,SAAS3B,KAAK,6BAFjD,SAGSsB,EAAIM,gBCrDZC,MAZf,WAAwB,IAAD,EACGC,mBAAS,kBAAC,EAAD,CAAMhC,KAAMf,IAAUe,KAAME,KAAOjB,IAAUiB,QADzD,mBACdgB,EADc,KACRe,EADQ,KAKrB,OAHAC,qBAAU,WACRD,EAAQ,kBAAC,EAAD,CAAMjC,KAAMf,IAAUe,KAAME,KAAMjB,IAAUiB,UACnD,IAED,6BACGgB,ICNDiB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,oEAYQC,EARH,WACV,OAAQ,6BACN,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,EAAD,SCFcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.12e6c15c.chunk.js","sourcesContent":["\r\nexport function dateNow () {\r\n  var now = new Date()\r\n  var ss = String(now.getSeconds()).padStart(2, '0')\r\n  var mins = String(now.getMinutes()).padStart(2, '0')\r\n  var hh = String(now.getHours()).padStart(2, '0')\r\n  var dd = String(now.getDate()).padStart(2, '0')\r\n  var mm = String(now.getMonth() + 1).padStart(2, '0')\r\n  var yyyy = now.getFullYear()\r\n  const dateNow = yyyy + '-' + mm + '-' + dd\r\n  const timeNow = hh + ':' + mins + ':' + ss\r\n\r\n  return {\r\n    date: dateNow,\r\n    time: timeNow\r\n  }\r\n}\r\n\r\nexport function dateAt (UTCmil) {\r\n  var date = new Date()\r\n  date.setTime(UTCmil)\r\n  var ss = String(date.getSeconds()).padStart(2, '0')\r\n  var mins = String(date.getMinutes()).padStart(2, '0')\r\n  var hh = String(date.getHours()).padStart(2, '0')\r\n  var dd = String(date.getDate()).padStart(2, '0')\r\n  var mm = String(date.getMonth() + 1).padStart(2, '0')\r\n  var yyyy = date.getFullYear()\r\n  const dateNow = yyyy + '-' + mm + '-' + dd\r\n  const timeNow = hh + ':' + mins + ':' + ss\r\n\r\n  return {\r\n    date: dateNow,\r\n    time: timeNow\r\n  }\r\n}","import React from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { gql } from 'apollo-boost'\r\nimport { dateAt } from '../utils/useTime'\r\n\r\n// Lat and Long coordinates of \"home\" and Eficode used in the query below.\r\nconst home = {\r\n  lat: 60.161042,\r\n  long: 24.878615\r\n}\r\nconst eficode = {\r\n  lat: 60.169429,\r\n  long: 24.926066\r\n}\r\n\r\n// The query used to fetch data for three itineraries at a time. Coordinates can be modified from above and the date- and time-parameters are\r\n// passed to the query from inside the <Plan>-component that renders the data.\r\nconst GET_PLAN = gql`\r\n  query Plan($date: String, $time: String, ){\r\n    plan(\r\n      date: $date,\r\n      time: $time\r\n      from: {lat: ${home.lat}, lon: ${home.long}}\r\n      to: {lat: ${eficode.lat}, lon: ${eficode.long}}\r\n      numItineraries: 3\r\n    ) {\r\n      itineraries {\r\n        startTime\r\n        duration\r\n        legs {\r\n          from {\r\n            name\r\n          }\r\n          startTime\r\n          to {\r\n            name\r\n          }\r\n          endTime\r\n          mode\r\n          route {\r\n            shortName\r\n          }\r\n          \r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// A Plan represents a group of three itineraries. It gets passed the date and time by the paenting InfoScreen.\r\nfunction Plan ({ date, time }) {\r\n\r\n  const { loading, error, data } = useQuery(GET_PLAN, {\r\n    variables: { date, time }\r\n  })\r\n\r\n  if (loading) return <p>Loading...</p>\r\n  if (error) return <p>Error :(</p>\r\n  return (\r\n    <div className=\"plan\" id=\"plan\">\r\n      {data.plan.itineraries.map(itinerary => (\r\n        <div className=\"itinerary\">\r\n          <p className=\"itinerary-header\">\r\n            itinerary, duration: {itinerary.duration}\r\n          </p>\r\n          <div className=\"itinerary-legs\">\r\n            legs: {itinerary.legs.map(leg => (\r\n              <div className=\"leg\">\r\n                from: {leg.from.name} at {dateAt(leg.startTime).time}<br />\r\n                to: {leg.to.name} at {dateAt(leg.endTime).time}<br />\r\n                with: {leg.mode}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Plan\r\n","import React, { useState, useEffect } from 'react'\r\nimport Plan from './Plan'\r\nimport { dateNow } from '../utils/useTime'\r\n\r\n// The infoscreen represents everything that is displayed.\r\nfunction InfoScreen () {\r\n  const [plan, setPlan] = useState(<Plan date={dateNow().date} time ={dateNow().time}/>)\r\n  useEffect(() => {\r\n    setPlan(<Plan date={dateNow().date} time={dateNow().time} />)\r\n  }, [])\r\n  return (\r\n    <div>\r\n      {plan}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoScreen\r\n","import React from 'react'\r\nimport ApolloClient from 'apollo-boost'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport InfoScreen from './InfoScreen'\r\n\r\n// Apollo Client, uses the Helsinki Region GraphQL-endpoint of digitransit.\r\nconst client = new ApolloClient({\r\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'\r\n})\r\n\r\n// The whole app. Wraps an ApolloProvider around the InfoScreen.\r\nconst App = () => {\r\n  return (<div>\r\n    <ApolloProvider client={client}>\r\n      <InfoScreen/>\r\n    </ApolloProvider>\r\n  </div>)\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}