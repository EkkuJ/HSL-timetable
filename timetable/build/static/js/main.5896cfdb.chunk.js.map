{"version":3,"sources":["utils/useTime.js","components/Leg.js","components/Plan.js","components/BikePlan.js","components/InfoScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["dateAt","UTCmil","date","Date","setTime","console","trace","ss","String","getSeconds","padStart","mins","getMinutes","hh","getHours","dd","getDate","mm","getMonth","getFullYear","time","Leg","props","from","leg","name","fromClean","startTime","slice","to","toClean","endTime","mode","icon","Icon","color","Segment","Group","className","horizontal","raised","textAlign","home","eficode","GET_PLAN","gql","Plan","queryVariables","useQuery","variables","loading","error","data","Container","id","plan","itineraries","map","itinerary","Grid","key","verticalAlign","columns","style","background","Column","width","stretched","legs","valueOf","padding","Header","as","data-testid","secs","duration","Math","ceil","BikePlan","leave","arrive","addMinsToDate","size","InfoScreen","screenDate","getTime","margin","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5896cfdb.chunk.js","sourcesContent":["\r\n// Utility funcions to handle time-props.\r\n\r\nexport function secsToMins (secs) {\r\n  return Math.ceil(secs / 60)\r\n}\r\nexport function UTCmilNow () {\r\n  var now = new Date()\r\n  return now.getTime()\r\n}\r\n\r\nexport function addMinsToDate (date, mins) {\r\n  return date + mins * 60000\r\n}\r\n\r\n// Current time as Object with attributes date <YYYY-MM-DD> and time <HH:MM:SS>.\r\nexport function dateNow () {\r\n  var now = new Date()\r\n  var ss = String(now.getSeconds()).padStart(2, '0')\r\n  var mins = String(now.getMinutes()).padStart(2, '0')\r\n  var hh = String(now.getHours()).padStart(2, '0')\r\n  var dd = String(now.getDate()).padStart(2, '0')\r\n  var mm = String(now.getMonth() + 1).padStart(2, '0')\r\n  var yyyy = now.getFullYear()\r\n  const dateNow = yyyy + '-' + mm + '-' + dd\r\n  const timeNow = hh + ':' + mins + ':' + ss\r\n\r\n  return {\r\n    date: dateNow,\r\n    time: timeNow\r\n  }\r\n}\r\n\r\n// Moment defined with UTCmil as Object with attributes date <YYYY-MM-DD> and time <HH:MM:SS>.\r\nexport function dateAt (UTCmil) {\r\n  var date = new Date()\r\n  date.setTime(UTCmil)\r\n  console.trace(date)\r\n  var ss = String(date.getSeconds()).padStart(2, '0')\r\n  var mins = String(date.getMinutes()).padStart(2, '0')\r\n  var hh = String(date.getHours()).padStart(2, '0')\r\n  var dd = String(date.getDate()).padStart(2, '0')\r\n  var mm = String(date.getMonth() + 1).padStart(2, '0')\r\n  var yyyy = date.getFullYear()\r\n  const dateNow = yyyy + '-' + mm + '-' + dd\r\n  const timeNow = hh + ':' + mins + ':' + ss\r\n\r\n  return {\r\n    date: dateNow,\r\n    time: timeNow\r\n  }\r\n}\r\n\r\n// Today's UTC milliseconds from timestamp defined with param time.\r\nexport function UTCmilAt (time) {\r\n  const hh = Number(time.split(':')[0])\r\n  const mins = Number(time.split(':')[1])\r\n  var date = new Date()\r\n  date.setMinutes(mins)\r\n  date.setHours(hh)\r\n  date.setSeconds(0)\r\n  return date.getTime()\r\n}\r\n","import React from 'react'\r\nimport { Segment, Icon } from 'semantic-ui-react'\r\nimport { dateAt } from '../utils/useTime'\r\n\r\nfunction Leg (props) {\r\n  var from = props.leg.from.name\r\n  var fromClean = (from === 'Origin') ? 'Home' : from\r\n  var startTime = dateAt(props.leg.startTime).time.slice(0, -3)\r\n  var to = props.leg.to.name\r\n  var toClean = (to === 'Destination') ? 'Office' : to\r\n  var endTime = dateAt(props.leg.endTime).time.slice(0, -3)\r\n  var mode = props.leg.mode\r\n  var icon = (mode === 'WALK') ? 'Walk to'\r\n    : (mode === 'BUS') ? <Icon name=\"bus\" color=\"blue\" />\r\n      : (mode === 'SUBWAY') ? <Icon name=\"subway\" color=\"orange\" />\r\n        : mode\r\n  return (\r\n    <Segment.Group className=\"leg\" horizontal raised>\r\n      <Segment className=\"from\" textAlign=\"center\"> {fromClean}<br />{startTime} </Segment>\r\n      <Segment className=\"mode\" textAlign=\"center\"> {icon} </Segment>\r\n      <Segment className=\"to\" textAlign=\"center\"> {toClean} <br />{endTime}</Segment>\r\n    </Segment.Group>\r\n  )\r\n}\r\n\r\nexport default Leg\r\n","import React from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { gql } from 'apollo-boost'\r\nimport { Grid, Container, Segment, Header } from 'semantic-ui-react'\r\nimport Leg from './Leg'\r\nimport { dateAt, secsToMins } from '../utils/useTime'\r\n\r\n// Lat and Long coordinates of \"home\" and Eficode used in the query below.\r\nconst home = {\r\n  lat: 60.161042,\r\n  long: 24.878615\r\n}\r\nconst eficode = {\r\n  lat: 60.169429,\r\n  long: 24.926066\r\n}\r\n\r\n// The query used to fetch data for three itineraries at a time. Coordinates can be modified from above and the date- and time-parameters are\r\n// passed to the query from inside the <Plan>-component that renders the data.\r\nconst GET_PLAN = gql`\r\n  query Plan($date: String, $time: String, ){\r\n    plan(\r\n      date: $date,\r\n      time: $time\r\n      from: {lat: ${home.lat}, lon: ${home.long}}\r\n      to: {lat: ${eficode.lat}, lon: ${eficode.long}}\r\n      numItineraries: 3\r\n    ) {\r\n      itineraries {\r\n        startTime\r\n        duration\r\n        legs {\r\n          from {\r\n            name\r\n          }\r\n          startTime\r\n          to {\r\n            name\r\n          }\r\n          endTime\r\n          mode\r\n          route {\r\n            shortName\r\n          }\r\n          \r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// A Plan represents a group of three itineraries. It gets passed the date and time by the paenting InfoScreen.\r\nfunction Plan (props) {\r\n  var queryVariables = dateAt(props.date)\r\n  const { loading, error, data } = useQuery(GET_PLAN, {\r\n    variables: {\r\n      date: queryVariables.date,\r\n      time: queryVariables.time\r\n    }\r\n  })\r\n  if (loading) return <p>Loading...</p>\r\n  if (error) return <p>Error :(</p>\r\n  return (\r\n    <Container className=\"planContainer\" id=\"plan\">\r\n      {data.plan.itineraries.map((itinerary) => (\r\n        <Segment>\r\n          <Grid className=\"itinerary\" key={itinerary.startTime} verticalAlign=\"middle\" columns={2} style={{background:\"#cceaff\"}}>\r\n            <Grid.Column width={14} stretched='true'>\r\n              <Grid className=\"itinerary-legs\" >\r\n                {itinerary.legs.map((leg) => (\r\n                  <Grid.Column width={5} stretched='true' verticalAlign=\"middle\">\r\n                    <Leg key={leg.startTime.valueOf()} leg={leg} style={{ padding: '1em' }} />\r\n                  </Grid.Column>\r\n                ))}\r\n              </Grid>\r\n            </Grid.Column>\r\n            <Grid.Column width={2}>\r\n              <Segment className=\"itinerary-duration\" stretched>\r\n                <Header as='h4' data-testid=\"duration\">{secsToMins(itinerary.duration)}min</Header>\r\n              </Segment>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      ))}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Plan\r\n","import React from 'react'\r\nimport { Container, Header, Segment, Icon } from 'semantic-ui-react'\r\nimport { dateAt, addMinsToDate } from '../utils/useTime'\r\n\r\n// The BikePlan represents a segment that displays a plan to get to work with a bike.\r\nfunction BikePlan (date) {\r\n  var leave = dateAt(date.date).time.slice(0,-3)\r\n  var arrive = dateAt(addMinsToDate(date.date, 12.5)).time.slice(0, -3)\r\n  return (\r\n    <Container>\r\n      <Header as='h3'>\r\n        Feeling frisky? Take a bike.\r\n      </Header>\r\n      <Segment.Group horizontal>\r\n        <Segment textAlign=\"center\">\r\n          Home<br />{leave}\r\n        </Segment>\r\n        <Segment textAlign=\"center\">\r\n          <Icon name='bicycle' size='large' />\r\n        </Segment>\r\n        <Segment textAlign=\"center\">\r\n          Office<br />{arrive}\r\n        </Segment>\r\n      </Segment.Group>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default BikePlan\r\n","import React from 'react'\r\nimport { Header, Segment, Container } from 'semantic-ui-react'\r\nimport Plan from './Plan'\r\nimport BikePlan from './BikePlan'\r\nimport { UTCmilNow } from '../utils/useTime'\r\n\r\n// The infoscreen represents everything that is displayed. Holds the time-state.\r\nfunction InfoScreen () {\r\n  const screenDate = UTCmilNow()\r\n\r\n  return (\r\n    <Container className=\"InfoScreen\" style={{ margin: '2em' }} >\r\n      <Header as='h1'>Get-to-Work!</Header>\r\n      <Segment className=\"plan\" style={{ background: '#a6abff' }}>\r\n        <Plan date={screenDate} />\r\n      </Segment>\r\n      <Segment className=\"bike-plan\" style={{ background: '#cceaff' }}>\r\n        <BikePlan date={screenDate} />\r\n      </Segment>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default InfoScreen\r\n","import React from 'react'\r\nimport ApolloClient from 'apollo-boost'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport InfoScreen from './InfoScreen'\r\n\r\n// Apollo Client, uses the Helsinki Region GraphQL-endpoint of digitransit.\r\nconst client = new ApolloClient({\r\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'\r\n})\r\n\r\n// The whole app. Wraps an ApolloProvider around the InfoScreen.\r\nconst App = () => {\r\n  return (<div className=\"App\">\r\n    <ApolloProvider client={client}>\r\n      <InfoScreen/>\r\n    </ApolloProvider>\r\n  </div>)\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}